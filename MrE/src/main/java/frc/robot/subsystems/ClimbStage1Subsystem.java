// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: PIDSubsystem.

package frc.robot.subsystems;

import frc.robot.RobotContainer;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj2.command.PIDSubsystem;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.math.MathUtil;

import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class ClimbStage1Subsystem extends SubsystemBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX m_climbMotorLeader;
    private WPI_VictorSPX m_climbMotorFollower;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public ClimbStage1Subsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_climbMotorLeader = new WPI_TalonSRX(2);
        m_climbMotorFollower = new WPI_VictorSPX(22);
        m_climbMotorLeader.setNeutralMode(NeutralMode.Brake);
        m_climbMotorFollower.setNeutralMode(NeutralMode.Brake);
        m_climbMotorFollower.setInverted(true);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // Use these to get going:
        // setSetpoint() - Sets where the PID controller should move the system
        // to
        // enable() - Enables the PID controller.
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        setOutput();
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void setOutput() {
        double output = applyDeadband(RobotContainer.getInstance().getcontrollerOperator().getLeftY());
        m_climbMotorLeader.set(output);
        m_climbMotorFollower.set(output);
    }

    public void setBrake() {
        m_climbMotorLeader.set(0.3);
        m_climbMotorFollower.set(0.3);
    }

    public void stopMotors() {
        m_climbMotorLeader.set(0.0);
        m_climbMotorFollower.set(0.0);
        m_climbMotorFollower.setNeutralMode(NeutralMode.Coast);
        m_climbMotorLeader.setNeutralMode(NeutralMode.Coast);
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    protected double applyDeadband(double value){
        double deadBand = 0.15;
        if(Math.abs(value) > deadBand){
            if(value > 0.0){
                return (value - deadBand) * (value - deadBand);
            } else{
                return -1 * (value + deadBand) *(value + deadBand);
            }
        } else {
            return 0.0;
        }
    }
}
