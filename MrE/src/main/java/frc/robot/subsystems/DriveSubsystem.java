// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.kauailabs.navx.frc.AHRS;
// import com.revrobotics.CANError;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SPI.Port;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax m_driveRightLeader;
private CANSparkMax m_driveRightFollower;
private MotorControllerGroup m_driveRight;
private CANSparkMax m_driveLeftLeader;
private CANSparkMax m_driveLeftFollower;
private MotorControllerGroup m_driveLeft;
private DifferentialDrive differentialDrive;
private AHRS m_gyro;
private Encoder m_encoderRightDrive;
private Encoder m_encoderLeftDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
m_driveRightLeader = new CANSparkMax(0, MotorType.kBrushless);
 
 m_driveRightLeader.restoreFactoryDefaults();  
m_driveRightLeader.setInverted(true);
m_driveRightLeader.setIdleMode(IdleMode.kBrake);
  

m_driveRightFollower = new CANSparkMax(1, MotorType.kBrushless);
 
 m_driveRightFollower.restoreFactoryDefaults();  
m_driveRightFollower.setInverted(true);
m_driveRightFollower.setIdleMode(IdleMode.kBrake);
  

m_driveRight = new MotorControllerGroup(m_driveRightLeader, m_driveRightFollower  );
 addChild("m_driveRight",m_driveRight);
 

m_driveLeftLeader = new CANSparkMax(2, MotorType.kBrushless);
 
 m_driveLeftLeader.restoreFactoryDefaults();  
m_driveLeftLeader.setInverted(false);
m_driveLeftLeader.setIdleMode(IdleMode.kBrake);
  

m_driveLeftFollower = new CANSparkMax(3, MotorType.kBrushless);
 
 m_driveLeftFollower.restoreFactoryDefaults();  
m_driveLeftFollower.setInverted(false);
m_driveLeftFollower.setIdleMode(IdleMode.kBrake);
  

m_driveLeft = new MotorControllerGroup(m_driveLeftLeader, m_driveLeftFollower  );
 addChild("m_driveLeft",m_driveLeft);
 

differentialDrive = new DifferentialDrive(m_driveRight, m_driveRightLeader);
 addChild("DifferentialDrive",differentialDrive);
 differentialDrive.setSafetyEnabled(true);
differentialDrive.setExpiration(0.1);
differentialDrive.setMaxOutput(1.0);


m_gyro = new AHRS(Port.kMXP, (byte)50);
 addChild("Gyro",m_gyro);
 

m_encoderRightDrive = new Encoder(2, 3, false, EncodingType.k4X);
 addChild("m_encoderRightDrive",m_encoderRightDrive);
 m_encoderRightDrive.setDistancePerPulse(1.0);

m_encoderLeftDrive = new Encoder(4, 5, false, EncodingType.k4X);
 addChild("m_encoderLeftDrive",m_encoderLeftDrive);
 m_encoderLeftDrive.setDistancePerPulse(1.0);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

